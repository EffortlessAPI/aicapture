/*******************************************
 Initially Generated by SSoT.me - codee42 & odxml42
 Created By: EJ Alexandra - 2017
             An Abstract Level, llc
 License:    Mozilla Public License 2.0
 *******************************************/
using SassyMQ.SSOTME.Lib;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace SSoTme.OST.Lib.CLIOptions
{
    public class AICManager
    {
        public string Auth0SID { get; private set; }

        internal static AICManager Create(string auth0SID)
        {
            var aicm = new AICManager();
            aicm.Auth0SID = auth0SID;
            return aicm; 
        }

        public void Start()
        {
            var aica = new AIC.SassyMQ.Lib.SMQAICAgent("amqps://smqPublic:smqPublic@effortlessapi-rmq.ssot.me/ej-aicapture-io");
            aica.UserAICInstallReceived += Aica_UserAICInstallReceived;
            aica.UserAICReplayReceived += Aica_UserAICReplayReceived;
            aica.UserSetDataReceived += Aica_UserSetDataReceived;
            aica.UserGetDataReceived += Aica_UserGetDataReceived;

            var payload = aica.CreatePayload();
            payload.AccessToken = this.Auth0SID;
            payload.DMQueue = aica.QueueName;
            var reply = aica.MonitoringFor(payload);


            Console.WriteLine($"Listening on DMQueue: {aica.QueueName}. Press Ctrl+C to end.");
            while (!Console.KeyAvailable)
            {
                aica.WaitForComplete(1000, false);
            }
            Console.ReadKey();
            aica.Disconnect();
        }


        private void Aica_UserAICInstallReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            throw new NotImplementedException();
        }

        private void Aica_UserGetDataReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            if (e.Payload.AICSkill is null)
            {
                e.Payload.AICaptureProjectFolder = $"/{Path.GetFileName(Environment.CurrentDirectory)}";
                var found = this.LookFor("single-source-of-truth.json", e.Payload);
                if (!found) found = this.LookFor("ssot.json", e.Payload);
                if (!found) found = this.LookFor("aicapture.json", e.Payload);
            } else
            {
                if (e.Payload.AICSkill == "GetProjectList")
                {
                    string parentDir = Environment.CurrentDirectory + "\\..";
                    e.Payload.Projects = Directory.GetDirectories(parentDir, "*", SearchOption.TopDirectoryOnly);
                }
            }
        }

        private void Aica_UserSetDataReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            if (e.Payload.AICSkill is null)
            {
                if (String.IsNullOrEmpty(e.Payload.FileName)) return;
                var fileName = Path.Combine(Environment.CurrentDirectory, e.Payload.FileName.Trim("\\/".ToCharArray()));
                var fileFI = new FileInfo(fileName);
                var patch = $"{e.Payload.Content}";
                var patchFI = new FileInfo(Path.Combine(fileFI.Directory.FullName, "__patch.json"));
                if (fileFI.Exists && patch.Contains("op"))
                {
                    File.WriteAllText(patchFI.FullName, patch);
                    this.PatchAndReplayAll(fileFI, patchFI);
                }
            } else
            {
                if (e.Payload.AICSkill == "ChangeProject")
                {
                    Environment.CurrentDirectory = e.Payload.Content;
                    Console.WriteLine("Current directory changed to " + Environment.CurrentDirectory);
                }
            }
        }

        private bool LookFor(string fileName, AIC.SassyMQ.Lib.StandardPayload payload)
        {
            var fi = new FileInfo(fileName);
            if (fi.Exists) return FoundFile(payload, fi);
            fi = new FileInfo(Path.Combine("ssot", fileName));
            if (fi.Exists) return FoundFile(payload, fi);
            return false;
        }

        private bool FoundFile(AIC.SassyMQ.Lib.StandardPayload payload, FileInfo fi)
        {
            payload.FileName = fi.FullName.Substring(Environment.CurrentDirectory.Length);
            payload.Content = File.ReadAllText(fi.FullName);
            return true;
        }

        private void PatchAndReplayAll(FileInfo fileFI, FileInfo patchFI)
        {
            // 1) issue the command > json-patch --json fileinfo.filename --patch patchfi.fullname
            var patchCommand = $"json-patch --json {fileFI.Name} --patch {patchFI.FullName}";
            ExecuteCommand(fileFI.DirectoryName, patchCommand);
            Task.Factory.StartNew(() =>
            {
                System.Threading.Thread.Sleep(5000);
                patchFI.Delete();
            });

            // 2) issue the command > aicapture -replayall
            var replayCommand = "aicapture -replayall";
            ExecuteCommand(fileFI.DirectoryName, replayCommand);
        }

        private void ExecuteCommand(string workingDirectory, string command)
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    RedirectStandardInput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    WorkingDirectory = workingDirectory
                }
            };
            process.Start();

            using (var sw = process.StandardInput)
            {
                if (sw.BaseStream.CanWrite)
                {
                    sw.WriteLine(command);
                }
            }
        }

        private void Aica_UserAICReplayReceived(object sender, AIC.SassyMQ.Lib.PayloadEventArgs e)
        {
            throw new Exception("Not setup to replay yet...");
        }
    }
}